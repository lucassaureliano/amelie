const qrcode = require('qrcode-terminal');
const { Client, LocalAuth } = require('whatsapp-web.js');
const { GoogleGenerativeAI } = require("@google/generative-ai");
const { GoogleAIFileManager } = require("@google/generative-ai/server");
const dotenv = require('dotenv');
const winston = require('winston');
const Datastore = require('nedb');

dotenv.config();

// Configura√ß√£o de vari√°veis de ambiente
const API_KEY = process.env.API_KEY;
const MAX_HISTORY = parseInt(process.env.MAX_HISTORY || '500');
let bot_name = process.env.BOT_NAME || 'Amelie';

// Configura√ß√£o do logger
const logger = winston.createLogger({
    level: 'debug',
    format: winston.format.combine(
        winston.format.timestamp(),
        winston.format.printf(({ timestamp, level, message, ...rest }) => {
            const extraData = Object.keys(rest).length ? JSON.stringify(rest, null, 2) : '';
            return `${timestamp} [${level}]: ${message} ${extraData}`;
        })
    ),
    transports: [
        new winston.transports.Console(),
        new winston.transports.File({ filename: 'bot.log' })
    ]
});

// Configura√ß√£o do NeDB
const messagesDb = new Datastore({ filename: './db/messages.db', autoload: true });
const promptsDb = new Datastore({ filename: './db/prompts.db', autoload: true });
const configDb = new Datastore({ filename: './db/config.db', autoload: true });
const usersDb = new Datastore({ filename: './db/users.db', autoload: true });

// Inicializa√ß√£o do GoogleGenerativeAI
const genAI = new GoogleGenerativeAI(API_KEY);

// Inicializa√ß√£o do modelo Gemini
const model = genAI.getGenerativeModel({ 
    model: "gemini-1.5-flash",
    safetySettings: [
      { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_NONE" },
      { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_NONE" },
      { category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold: "BLOCK_NONE" },
      { category: "HARM_CATEGORY_DANGEROUS_CONTENT", threshold: "BLOCK_NONE" }
    ]
  });

// Inicializa√ß√£o do FileManager
const fileManager = new GoogleAIFileManager(API_KEY);

// Mapa para armazenar as √∫ltimas respostas por chat
const lastResponses = new Map();

// Configura√ß√£o padr√£o
const defaultConfig = {
    temperature: 0.9,
    topK: 93,
    topP: 0.95,
    maxOutputTokens: 1024,
    mediaImage: true,  // Habilita descri√ß√£o de imagens por padr√£o
    mediaAudio: true,  // Habilita transcri√ß√£o de √°udio por padr√£o
}

// Configura√ß√£o do cliente WhatsApp
const client = new Client({
    authStrategy: new LocalAuth()
});

client.on('qr', qr => {
    qrcode.generate(qr, {small: true});
    logger.info('QR code gerado');
});

async function initializeBot() {
    try {
        await loadConfigOnStartup();
        logger.info('Todas as configura√ß√µes foram carregadas com sucesso');
    } catch (error) {
        logger.error('Erro ao carregar configura√ß√µes:', error);
    }
}

client.on('message_create', async (msg) => {
    try {
        if (msg.fromMe) return;

        const chat = await msg.getChat();
        await chat.sendSeen();

        logger.info(`Mensagem recebida: User (identificado no Whatsapp como ${msg.author} ou ${msg.from}) -> ${msg.body}`);

        const chatId = chat.id._serialized;

        // Verifica se √© um comando
        const isCommand = msg.body.startsWith('!');

        if (chat.isGroup && !isCommand) {
            const shouldRespond = await shouldRespondInGroup(msg, chat);
            if (!shouldRespond && !msg.hasMedia) return;
        }

        if (isCommand) {
            logger.info(`Comando detectado: ${msg.body}`);
            await handleCommand(msg, chatId);
        } else if (msg.hasMedia) {
            const attachmentData = await msg.downloadMedia();
            if (attachmentData.mimetype === 'audio/ogg; codecs=opus' || 
                attachmentData.mimetype.startsWith('audio/')) {
                await handleAudioMessage(msg, attachmentData, chatId);
            } else if (attachmentData.mimetype.startsWith('image/')) {
                await handleImageMessage(msg, attachmentData, chatId);
            } else {
                await msg.reply('Desculpe, no momento s√≥ posso processar √°udios e imagens.');
            }
        } else {
            await handleTextMessage(msg);
        }

    } catch (error) {
        logger.error(`Erro ao processar mensagem: ${error.message}`, { error });
        await msg.reply('Desculpe, ocorreu um erro inesperado. Por favor, tente novamente mais tarde.');
    }
});

async function calculateAverageMessageLength(chatId) {
    return new Promise((resolve, reject) => {
      messagesDb.find({ chatId: chatId, type: 'user' })
        .sort({ timestamp: -1 })
        .limit(10)
        .exec((err, messages) => {
          if (err) {
            reject(err);
          } else {
            const totalLength = messages.reduce((sum, msg) => sum + msg.content.length, 0);
            const averageLength = messages.length > 0 ? Math.round(totalLength / messages.length) : 100; // Default to 100 if no messages
            resolve(averageLength);
          }
        });
    });
  }

  async function shouldRespondInGroup(msg, chat) {
    if (msg.body.startsWith('!')) {
        return true;
    }

    const mentions = await msg.getMentions();
    const isBotMentioned = mentions.some(mention => mention.id._serialized === client.info.wid._serialized);

    let isReplyToBot = false;
    if (msg.hasQuotedMsg) {
        const quotedMsg = await msg.getQuotedMessage();
        isReplyToBot = quotedMsg.fromMe;
    }

    const isBotNameMentioned = msg.body.toLowerCase().includes(bot_name.toLowerCase());

    // Para mensagens que n√£o s√£o comandos, mant√©m a l√≥gica original
    return isBotMentioned || isReplyToBot || isBotNameMentioned;
}

async function handleCommand(msg, chatId) {
    const [command, ...args] = msg.body.slice(1).split(' ');
    logger.info(`Comando: ${command}, Argumentos: ${args}`);

    try {
        switch (command.toLowerCase()) {
            case 'reset':
                await resetHistory(chatId);
                await msg.reply('ü§ñ Hist√≥rico resetado para este chat');
                break;
            case 'help':
                await msg.reply(
`Comandos dispon√≠veis:\n 
!reset - Limpa o hist√≥rico de conversa\n 
!prompt set <nome> <texto> - Define uma nova System Instruction\n 
!prompt get <nome> - Mostra uma System Instruction existente\n 
!prompt list - Lista todas as System Instructions\n 
!prompt use <nome> - Usa uma System Instruction espec√≠fica\n 
!prompt clear - Remove a System Instruction ativa\n 
!config set <param> <valor> - Define um par√¢metro de configura√ß√£o\n 
!config get [param] - Mostra a configura√ß√£o atual\n 
!users - Lista os usu√°rios do grupo\n 
!cego - Aplica configura√ß√µes para usu√°rios com defici√™ncia visual\n 
!help - Mostra esta mensagem de ajuda`
                );
                break;
            case 'prompt':
                await handlePromptCommand(msg, args, chatId);
                break;
            case 'config':
                await handleConfigCommand(msg, args, chatId);
                break;
            case 'users':
                await listGroupUsers(msg);
                break;
            case 'cego':
                await handleCegoCommand(msg, chatId);
                break;
            default:
                await msg.reply('Comando desconhecido. Use !help para ver os comandos dispon√≠veis.');
        }
    } catch (error) {
        logger.error(`Erro ao executar comando: ${error.message}`, { error });
        await msg.reply('Desculpe, ocorreu um erro ao executar o comando. Por favor, tente novamente.');
    }
}

function removeEmojis(text) {
    // Esta regex abrange uma ampla gama de emojis, incluindo sequ√™ncias de emojis compostos
    return text.replace(/[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{1F1E0}-\u{1F1FF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}\u{1F900}-\u{1F9FF}\u{1F018}-\u{1F0FF}\u{1F100}-\u{1F2FF}]/gu, '');
}

async function handleCegoCommand(msg, chatId) {
    try {
        // Habilitar descri√ß√£o de imagens
        await setConfig(chatId, 'mediaImage', true);

        // Desabilitar transcri√ß√£o de √°udio
        await setConfig(chatId, 'mediaAudio', false);

        // Definir e ativar o prompt Audiomar
        const audiomarPrompt = `Voc√™ √© um chatbot especializado em audiodescri√ß√£o, projetado para funcionar em um grupo de WhatsApp com mais de 200 pessoas cegas. Sua fun√ß√£o principal √© descrever imagens e stickers compartilhados no grupo, fornecendo uma audiodescri√ß√£o profissional, detalhada, did√°tica e polida.
        
        Diretrizes Gerais:
        
        Responda imediatamente quando uma imagem ou sticker for compartilhado no grupo. Mantenha suas respostas concisas, mas informativas. Use linguagem clara e acess√≠vel, evitando termos t√©cnicos desnecess√°rios. Seja respeitoso e inclusivo em todas as suas intera√ß√µes.
        
        Estrutura da Resposta: Para cada imagem ou sticker, sua resposta deve seguir este formato:
        
        [Audiodescri√ß√£o]
        (Forne√ßa uma descri√ß√£o objetiva e detalhada da imagem) 
        
        Diretrizes para a Descri√ß√£o Profissional:

        Comece com uma vis√£o geral da imagem antes de entrar em detalhes.
        Descreva os elementos principais da imagem, do mais importante ao menos relevante.
        Mencione cores, formas e texturas quando forem significativas para a compreens√£o.
        Indique a posi√ß√£o dos elementos na imagem (por exemplo, "no canto superior direito").
        Descreva express√µes faciais e linguagem corporal em fotos com pessoas.
        Mencione o tipo de imagem (por exemplo, fotografia, ilustra√ß√£o, pintura).
        Informe sobre o enquadramento (close-up, plano geral, etc.) quando relevante.
        Inclua detalhes do cen√°rio ou fundo que contribuam para o contexto.
        Evite usar termos subjetivos como "bonito" ou "feio".
        Seja espec√≠fico com n√∫meros (por exemplo, "tr√™s pessoas" em vez de "algumas pessoas").
        Descreva texto vis√≠vel na imagem, incluindo legendas ou t√≠tulos.
        Mencione a escala ou tamanho relativo dos objetos quando importante.
        Indique se a imagem √© em preto e branco ou colorida.
Descreva a ilumina√ß√£o se for um elemento significativo da imagem.
Para obras de arte, inclua informa√ß√µes sobre o estilo art√≠stico e t√©cnicas utilizadas.`;

        await setSystemPrompt(chatId, 'Audiomar', audiomarPrompt);
        await setActiveSystemPrompt(chatId, 'Audiomar');

        // Confirmar as altera√ß√µes para o usu√°rio
        await msg.reply('Configura√ß√µes para usu√°rios com defici√™ncia visual aplicadas com sucesso:\n' +
                        '- Descri√ß√£o de imagens habilitada\n' +
                        '- Transcri√ß√£o de √°udio desabilitada\n' +
                        '- Prompt de audiodescri√ß√£o "Audiomar" ativado');

        logger.info(`Configura√ß√µes para usu√°rios com defici√™ncia visual aplicadas no chat ${chatId}`);
    } catch (error) {
        logger.error(`Erro ao aplicar configura√ß√µes para usu√°rios com defici√™ncia visual: ${error.message}`, { error });
        await msg.reply('Desculpe, ocorreu um erro ao aplicar as configura√ß√µes. Por favor, tente novamente.');
    }
}

async function handleTextMessage(msg) {
    try {
      const chat = await msg.getChat();
      const chatId = chat.id._serialized;
      const sender = msg.author || msg.from;
  
      const user = await getOrCreateUser(sender, chat);
      const chatConfig = await getConfig(chatId);
  
      await updateMessageHistory(chatId, user.name, msg.body);
  
      const history = await getMessageHistory(chatId);
      const userPromptText = `Hist√≥rico de chat: (formato: nome do usu√°rio e em seguida mensagem; responda √† √∫ltima mensagem)\n\n${history.join('\n')}`;
  
      logger.debug(`Gerando resposta para: ${userPromptText}`);
      const response = await generateResponseWithText(userPromptText, chatId);
      logger.debug(`Resposta gerada (sem emojis): ${response}`);
  
      await updateMessageHistory(chatId, chatConfig.botName, response, true);
      await sendMessage(msg, response);
    } catch (error) {
      logger.error(`Erro ao processar mensagem de texto: ${error.message}`);
      await msg.reply('Desculpe, ocorreu um erro ao processar sua mensagem. Por favor, tente novamente.');
    }
}  

async function getOrCreateUser(sender, chat) {
    return new Promise((resolve, reject) => {
        usersDb.findOne({ id: sender }, async (err, user) => {
            if (err) {
                reject(err);
            } else if (user) {
                resolve(user);
            } else {
                try {
                    let contact;
                    if (chat.isGroup) {
                        const participants = await chat.participants;
                        contact = participants.find(p => p.id._serialized === sender);
                    } else {
                        contact = await chat.getContact();
                    }
                    
                    const newUser = {
                        id: sender,
                        name: contact.pushname || contact.name || `User${sender.substring(0, 12)}`,
                        joinedAt: new Date()
                    };
                    
                    usersDb.insert(newUser, (err, doc) => {
                        if (err) reject(err);
                        else resolve(doc);
                    });
                } catch (error) {
                    reject(error);
                }
            }
        });
    });
}

async function handleAudioMessage(msg, audioData, chatId) {
    try {
        // Verifica se a transcri√ß√£o de √°udio est√° habilitada para este chat
        const config = await getConfig(chatId);
        if (!config.mediaAudio) {
            logger.info(`Transcri√ß√£o de √°udio desabilitada para o chat ${chatId}. Ignorando mensagem de √°udio.`);
            return; // Sai da fun√ß√£o sem processar o √°udio
        }

        // Verifica se o √°udio √© menor ou igual a 20MB
        const audioSizeInMB = audioData.data.length / (1024 * 1024);
        if (audioSizeInMB > 20) {
            await msg.reply('Desculpe, s√≥ posso processar √°udios de at√© 20MB.');
            return;
        }

        const isPTT = audioData.mimetype === 'audio/ogg; codecs=opus';
        
        logger.info(`Processando arquivo de √°udio: ${isPTT ? 'PTT' : '√Åudio regular'}`);

        // Converte o buffer de √°udio para base64
        const base64AudioFile = audioData.data.toString('base64');

        // Obt√©m a configura√ß√£o do usu√°rio, incluindo as system instructions
        const userConfig = await getConfig(chatId);

        // Cria uma inst√¢ncia do modelo com as system instructions
        const modelWithInstructions = genAI.getGenerativeModel({
            model: "gemini-1.5-flash",
            generationConfig: {
                temperature: userConfig.temperature,
                topK: userConfig.topK,
                topP: userConfig.topP,
                maxOutputTokens: userConfig.maxOutputTokens,
            },
            safetySettings: [
                { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_NONE" },
                { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_NONE" },
                { category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold: "BLOCK_NONE" },
                { category: "HARM_CATEGORY_DANGEROUS_CONTENT", threshold: "BLOCK_NONE" }
            ],
            systemInstruction: userConfig.systemInstructions
        });

        // Obt√©m o hist√≥rico de mensagens
        const history = await getMessageHistory(chatId);
        const historyPrompt = history.join('\n');

        // Prepara o conte√∫do para gera√ß√£o
        const contentParts = [
            {
                inlineData: {
                    mimeType: audioData.mimetype,
                    data: base64AudioFile
                }
            },
            { text: `Hist√≥rico da conversa:\n${historyPrompt}\n\nAgora, considerando este hist√≥rico e o √°udio fornecido, por favor, transcreva o √°udio e depois resuma o conte√∫do em portugu√™s.` }
        ];

        // Gera o conte√∫do usando o modelo
        const result = await modelWithInstructions.generateContent(contentParts);
        const response = await result.response.text();

        await sendMessage(msg, response);

        // Atualizar o hist√≥rico de mensagens
        await updateMessageHistory(chatId, msg.author || msg.from, '[√Åudio]', false);
        await updateMessageHistory(chatId, userConfig.botName, response, true);

    } catch (error) {
        logger.error(`Erro ao processar mensagem de √°udio: ${error.message}`, { error });
        await msg.reply('Desculpe, ocorreu um erro ao processar o √°udio. Por favor, tente novamente.');
    }
}

async function handleImageMessage(msg, imageData, chatId) {
    try {
        // Verifica se a descri√ß√£o de imagem est√° habilitada para este chat
        const config = await getConfig(chatId);
        if (!config.mediaImage) {
            logger.info(`Descri√ß√£o de imagem desabilitada para o chat ${chatId}. Ignorando mensagem de imagem.`);
            return; // Sai da fun√ß√£o sem processar a imagem
        }

        let userPrompt = "Descreva esta imagem em detalhes, focando apenas no que voc√™ v√™ com certeza. Se n√£o tiver certeza sobre algo, n√£o mencione.";
        
        // Verifica se h√° uma mensagem de texto junto com a imagem
        if (msg.body && msg.body.trim() !== '') {
            userPrompt = msg.body.trim();
        }

        const imagePart = {
            inlineData: {
                data: imageData.data.toString('base64'),
                mimeType: imageData.mimetype
            }
        };

        // Obt√©m a configura√ß√£o do usu√°rio, incluindo as system instructions
        const userConfig = await getConfig(chatId);

        // Obt√©m o hist√≥rico de mensagens, mas limita a um n√∫mero menor de mensagens recentes
        const history = await getMessageHistory(chatId, 5); // Limita a 5 mensagens recentes
        const historyPrompt = history.join('\n');

        // Cria uma inst√¢ncia do modelo com as system instructions e temperatura espec√≠fica para imagens
        const modelWithInstructions = genAI.getGenerativeModel({
            model: "gemini-1.5-flash",
            generationConfig: {
                temperature: 0.2, // Temperatura espec√≠fica para interpreta√ß√£o de imagens
                topK: userConfig.topK,
                topP: userConfig.topP,
                maxOutputTokens: userConfig.maxOutputTokens,
            },
            safetySettings: [
                { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_NONE" },
                { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_NONE" },
                { category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold: "BLOCK_NONE" },
                { category: "HARM_CATEGORY_DANGEROUS_CONTENT", threshold: "BLOCK_NONE" }
            ],
            systemInstruction: userConfig.systemInstructions + "\nFoque apenas na imagem mais recente. Descreva apenas o que voc√™ v√™ com certeza. Evite fazer suposi√ß√µes ou infer√™ncias al√©m do que √© claramente vis√≠vel na imagem."
        });

        const contentParts = [
            imagePart,
            { text: `Contexto recente da conversa:\n${historyPrompt}\n\nAgora, considerando apenas a imagem fornecida e ignorando qualquer contexto anterior que n√£o seja diretamente relevante, ${userPrompt}\n\nLembre-se: Descreva apenas o que voc√™ v√™ com certeza na imagem. Se n√£o tiver certeza sobre algo, n√£o mencione.` }
        ];

        const result = await modelWithInstructions.generateContent(contentParts);

        const response = await result.response.text();
        await sendMessage(msg, response);

        // Atualizar o hist√≥rico de mensagens
        await updateMessageHistory(chatId, msg.author || msg.from, `[Imagem] ${userPrompt}`, false);
        await updateMessageHistory(chatId, userConfig.botName, response, true);

    } catch (error) {
        logger.error(`Erro ao processar mensagem de imagem: ${error.message}`, { error });
        await msg.reply('Desculpe, ocorreu um erro ao processar a imagem. Por favor, tente novamente.');
    }
}

async function generateResponseWithText(userPrompt, chatId) {
    try {
      const userConfig = await getConfig(chatId);
      const model = genAI.getGenerativeModel({
        model: "gemini-1.5-flash",
        generationConfig: {
          temperature: userConfig.temperature,
          topK: userConfig.topK,
          topP: userConfig.topP,
          maxOutputTokens: userConfig.maxOutputTokens,
        },
        safetySettings: [
          { category: "HARM_CATEGORY_HARASSMENT", threshold: "BLOCK_NONE" },
          { category: "HARM_CATEGORY_HATE_SPEECH", threshold: "BLOCK_NONE" },
          { category: "HARM_CATEGORY_SEXUALLY_EXPLICIT", threshold: "BLOCK_NONE" },
          { category: "HARM_CATEGORY_DANGEROUS_CONTENT", threshold: "BLOCK_NONE" }
        ],
        systemInstruction: userConfig.systemInstructions
      });
      
      const result = await model.generateContent(userPrompt);
      let responseText = result.response.text();
  
      if (!responseText) {
        throw new Error('Resposta vazia gerada pelo modelo');
      }
  
      responseText = removeEmojis(responseText);
  
      return responseText;
    } catch (error) {
      console.error(`Erro ao gerar resposta de texto: ${error.message}`);
      return "Desculpe, ocorreu um erro ao gerar a resposta. Por favor, tente novamente ou reformule sua pergunta.";
    }
  }

function getMessageHistory(chatId, limit = MAX_HISTORY) {
    return new Promise((resolve, reject) => {
        messagesDb.find({ chatId: chatId, type: { $in: ['user', 'bot'] } })
            .sort({ timestamp: -1 })
            .limit(limit * 2)
            .exec((err, docs) => {
                if (err) reject(err);
                else resolve(docs.reverse().map(doc => `${doc.sender}: ${doc.content}`));
            });
    });
}

async function loadConfigOnStartup() {
    return new Promise((resolve, reject) => {
        configDb.find({}, async (err, docs) => {
            if (err) {
                reject(err);
            } else {
                for (const doc of docs) {
                    const chatId = doc.chatId;
                    const config = await getConfig(chatId);
                    logger.info(`Configura√ß√µes carregadas para o chat ${chatId}`);
                }
                resolve();
            }
        });
    });
}

async function listGroupUsers(msg) {
    const chat = await msg.getChat();
    if (chat.isGroup) {
        const participants = await chat.participants;
        const userList = await Promise.all(participants.map(async (p) => {
            const user = await getOrCreateUser(p.id._serialized, chat);
            return `${user.name} (${p.id.user})`;
        }));
        await msg.reply(`Usu√°rios no grupo:\n${userList.join('\n')}`);
    } else {
        await msg.reply('Este comando s√≥ funciona em grupos.');
    }
}

async function initializeBot() {
    try {
        await loadConfigOnStartup();
        logger.info('Todas as configura√ß√µes foram carregadas com sucesso');
    } catch (error) {
        logger.error('Erro ao carregar configura√ß√µes:', error);
    }
}

function updateMessageHistory(chatId, sender, message, isBot = false) {
    return new Promise((resolve, reject) => {
        messagesDb.insert({
            chatId,
            sender,
            content: message,
            timestamp: Date.now(),
            type: isBot ? 'bot' : 'user'
        }, (err) => {
            if (err) reject(err);
            else {
                messagesDb.find({ chatId: chatId, type: { $in: ['user', 'bot'] } })
                    .sort({ timestamp: -1 })
                    .skip(MAX_HISTORY * 2)
                    .exec((err, docsToRemove) => {
                        if (err) reject(err);
                        else {
                            messagesDb.remove({ _id: { $in: docsToRemove.map(doc => doc._id) } }, { multi: true }, (err) => {
                                if (err) reject(err);
                                else resolve();
                            });
                        }
                    });
            }
        });
    });
}

function resetHistory(chatId) {
    return new Promise((resolve, reject) => {
        messagesDb.remove({ chatId: chatId, type: { $in: ['user', 'bot'] } }, { multi: true }, (err) => {
            if (err) reject(err);
            else resolve();
        });
    });
}

async function handlePromptCommand(msg, args, chatId) {
    const [subcommand, name, ...rest] = args;

    switch (subcommand) {
        case 'set':
            if (name && rest.length > 0) {
                const promptText = rest.join(' ');
                await setSystemPrompt(chatId, name, promptText);
                //await clearChatOnInstructionChange(chatId);
                await msg.reply(`System Instruction "${name}" definida com sucesso. O hist√≥rico do chat foi limpo.`);
            } else {
                await msg.reply('Uso correto: !prompt set <nome> <texto>');
            }
            break;
        case 'get':
            if (name) {
                const prompt = await getSystemPrompt(chatId, name);
                if (prompt) {
                    await msg.reply(`System Instruction "${name}":\n${prompt.text}`);
                } else {
                    await msg.reply(`System Instruction "${name}" n√£o encontrada.`);
                }
            } else {
                await msg.reply('Uso correto: !prompt get <nome>');
            }
            case 'list':
            const prompts = await listSystemPrompts(chatId);
            if (prompts.length > 0) {
                const promptList = prompts.map(p => p.name).join(', ');
                await msg.reply(`System Instructions dispon√≠veis: ${promptList}`);
            } else {
                await msg.reply('Nenhuma System Instruction definida.');
            }
            break;
        case 'use':
            if (name) {
                const prompt = await getSystemPrompt(chatId, name);
                if (prompt) {
                    await setActiveSystemPrompt(chatId, name);
                    await msg.reply(`System Instruction "${name}" ativada para este chat.`);
                } else {
                    await msg.reply(`System Instruction "${name}" n√£o encontrada.`);
                }
            } else {
                await msg.reply('Uso correto: !prompt use <nome>');
            }
            break;
        case 'clear':
            await clearActiveSystemPrompt(chatId);
            await msg.reply('System Instruction removida. Usando o modelo padr√£o.');
            break;
        default:
            await msg.reply('Subcomando de prompt desconhecido. Use !help para ver os comandos dispon√≠veis.');
    }
}

async function handleConfigCommand(msg, args, chatId) {
    const [subcommand, param, value] = args;

    switch (subcommand) {
        case 'set':
            if (param && value) {
                if (['temperature', 'topK', 'topP', 'maxOutputTokens'].includes(param)) {
                    const numValue = parseFloat(value);
                    if (!isNaN(numValue)) {
                        await setConfig(chatId, param, numValue);
                        await msg.reply(`Par√¢metro ${param} definido como ${numValue}`);
                    } else {
                        await msg.reply(`Valor inv√°lido para ${param}. Use um n√∫mero.`);
                    }
                } else {
                    await msg.reply(`Par√¢metro desconhecido: ${param}`);
                }
            } else {
                await msg.reply('Uso correto: !config set <param> <valor>');
            }
            break;
        case 'get':
            const config = await getConfig(chatId);
            if (param) {
                if (config.hasOwnProperty(param)) {
                    await msg.reply(`${param}: ${config[param]}`);
                } else {
                    await msg.reply(`Par√¢metro desconhecido: ${param}`);
                }
            } else {
                const configString = Object.entries(config)
                    .map(([key, value]) => `${key}: ${value}`)
                    .join('\n');
                await msg.reply(`Configura√ß√£o atual:\n${configString}`);
            }
            break;
        default:
            await msg.reply('Subcomando de config desconhecido. Use !help para ver os comandos dispon√≠veis.');
    }
}

// Modifique a fun√ß√£o setSystemPrompt
function setSystemPrompt(chatId, name, text) {
    return new Promise((resolve, reject) => {
        const formattedText = `Seu nome √© ${name}. ${text}`;
        promptsDb.update({ chatId, name }, { chatId, name, text: formattedText }, { upsert: true }, (err) => {
            if (err) reject(err);
            else resolve();
        });
    });
}

function getSystemPrompt(chatId, name) {
    return new Promise((resolve, reject) => {
        promptsDb.findOne({ chatId, name }, (err, doc) => {
            if (err) reject(err);
            else resolve(doc);
        });
    });
}

function listSystemPrompts(chatId) {
    return new Promise((resolve, reject) => {
        promptsDb.find({ chatId }, (err, docs) => {
            if (err) reject(err);
            else resolve(docs);
        });
    });
}

async function setActiveSystemPrompt(chatId, promptName) {
    try {
        const prompt = await getSystemPrompt(chatId, promptName);
        if (prompt) {
            await setConfig(chatId, 'activePrompt', promptName);
            // Remova a atribui√ß√£o global de bot_name
            // bot_name = promptName
            logger.debug(`Active prompt set for chat ${chatId}: ${promptName}`);
            return true;
        }
        return false;
    } catch (error) {
        logger.error(`Erro ao definir System Instruction ativa: ${error.message}`, { error });
        return false;
    }
}

async function clearChatOnInstructionChange(chatId) {
    //try {
    //    await messagesDb.remove({ chatId: chatId }, { multi: true });
    //    logger.info(`Chat limpo para ${chatId} devido √† mudan√ßa nas instru√ß√µes do sistema`);
    //} catch (error) {
    //    logger.error(`Erro ao limpar chat para ${chatId}: ${error.message}`);
    //}
}

async function clearActiveSystemPrompt(chatId) {
    try {
        await setConfig(chatId, 'activePrompt', null);
        return true;
    } catch (error) {
        logger.error(`Erro ao limpar System Instruction ativa: ${error.message}`, { error });
        return false;
    }
}

function setConfig(chatId, param, value) {
    return new Promise((resolve, reject) => {
        configDb.update(
            { chatId },
            { $set: { [param]: value } },
            { upsert: true },
            (err) => {
                if (err) reject(err);
                else resolve();
            }
        );
    });
}

async function getConfig(chatId) {
    return new Promise((resolve, reject) => {
        configDb.findOne({ chatId }, async (err, doc) => {
            if (err) {
                reject(err);
            } else {
                const userConfig = doc || {};
                const config = { ...defaultConfig, ...userConfig };

                if (config.activePrompt) {
                    const activePrompt = await getSystemPrompt(chatId, config.activePrompt);
                    if (activePrompt) {
                        config.systemInstructions = activePrompt.text;
                        const match = config.systemInstructions.match(/^Seu nome √© (\w+)\./);
                        config.botName = match ? match[1] : (process.env.BOT_NAME || 'Amelie');
                    }
                } else {
                    config.botName = process.env.BOT_NAME || 'Amelie';
                }

                if (config.systemInstructions && typeof config.systemInstructions !== 'string') {
                    config.systemInstructions = String(config.systemInstructions);
                }

                resolve(config);
            }
        });
    });
}

async function sendMessage(msg, text) {
    try {
        if (!text || typeof text !== 'string' || text.trim() === '') {
            logger.error('Tentativa de enviar mensagem inv√°lida:', { text });
            text = "Desculpe, ocorreu um erro ao gerar a resposta. Por favor, tente novamente.";
        }

        let trimmedText = text.trim();
        trimmedText = trimmedText.replace(/\r\n/g, '\n').replace(/\r/g, '\n').replace(/\n{3,}/g, '\n\n');

        logger.debug('Enviando mensagem:', { text: trimmedText });
        await msg.reply(trimmedText);
        logger.info('Mensagem enviada com sucesso');
    } catch (error) {
        logger.error('Erro ao enviar mensagem:', { 
            error: error.message,
            stack: error.stack,
            text: text
        });
        await msg.reply('Desculpe, ocorreu um erro ao enviar a resposta. Por favor, tente novamente.');
    }
}

client.initialize();

process.on('unhandledRejection', (reason, promise) => {
    logger.error('Unhandled Rejection at:', { promise, reason });
});

process.on('uncaughtException', (error) => {
    logger.error(`Uncaught Exception: ${error.message}`, { error });
    process.exit(1);
});
module.exports = {
    getOrCreateUser,
    updateMessageHistory,
    getMessageHistory,
    resetHistory,
    setSystemPrompt,
    getSystemPrompt,
    listSystemPrompts,
    setActiveSystemPrompt,
    clearActiveSystemPrompt,
    setConfig,
    getConfig,
    generateResponseWithText,
    handleTextMessage,
    handleImageMessage,
    handleAudioMessage,
  };